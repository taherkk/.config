# interpreter for shell commands (needs to be POSIX compatible)
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# drawbox - draws boxes around the three panes
# set drawbox

# Searches as you type and highlights the file
set incsearch

# Goes to the top if gone below the last file and vice versa
set wrapscroll

# Numbering beside the files
set number
set relativenumber

# Tabstop
set tabstop 2

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# use enter for shell commands
map <enter> shell

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# shortcuts for changing directories
map ge cd /etc
map gu cd /usr
map gd cd /dev
map go cd /opt
map gv cd /var
map gm cd /media
map gM cd /mnt
map gs cd ~/.scripts
map gtmp cd /tmp
map gr cd /
map gw cd ~/Workspace
map g/ cd /
map g? cd /usr/share/doc/ranger
map gtor cd ~/torrents
map gcf cd ~/.config
map gy cd ~/youtube-dl
map gDo cd ~/Downloads
map gDr cd ~/Dropbox
map gb cd ~/Google_drive/tkkathana/BOOKS/
map gp cd ~/Pictures
map tr trash
map D delete
map ext extract

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    case $(file --mime-type $f -b) in
        text/*) st -e $EDITOR $fx & > /dev/null 2> /dev/null;;
        application/json) st -e $EDITOR $fx & > /dev/null 2> /dev/null;;
        application/pdf) $READER $fx & > /dev/null;;
        video/* | audio/*) nohup $VPLAYER $fx  < /dev/null > /dev/null 2>&1 &;;
        application/vnd.*) libreoffice $fx & > /dev/null 2> /dev/null;; 
        image/*) $IVIEWER $fx & 2> /dev/null > /dev/null;;
        *) for f in $fx; do $OPEN $f > /dev/null 2> /dev/null & done;;
    esac
}}

cmd openwith ${{ 
  read -p "Open with: " program
  $program $fx & > /dev/null 2>/dev/null;;
}}

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
%mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ $ans = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd bulk-rename ${{
    old=$(mktemp)
    new=$(mktemp)
    [ -n $fs ] && fs=$(ls)
    printf "$fs\n" > $old
    printf "$fs\n" > $new
    $EDITOR $new
    [ $(cat $new | wc -l) -ne $(cat $old | wc -l) ] && exit
    paste $old $new | while read names; do
        src=$(printf $names | cut -f1)
        dst=$(printf $names | cut -f2)
        [ $src = $dst ] && continue
        [ -e $dst ] && continue
        mv $src $dst
    done
    rm $old $new
    lf -remote "send $id unselect"
}}

cmd copy_filename ${{
  for file in $fx;do
    files+=${file}\\n
  done
  printf $files | xclip -selection clipboard
}}
